
// Select input folder
inputdirectory = getDirectory("Input directory containing raw images (*.jpg, *jpeg, *.tif,*.tiff)" );

// ROI file, needs to be created in advance.
roifile = File.openDialog("Select a ROI file.");

// Directory, under which all the results folders will be saved.
outputdirectory = getDirectory("Output Directory");


// Create output directories
mask1directory = outputdirectory + "/mask1";
mask2directory = outputdirectory + "/mask2";
resultdirectory = outputdirectory + "/measurement"

File.makeDirectory(mask1directory);
File.makeDirectory(mask2directory);
File.makeDirectory(resultdirectory);

setBatchMode(true);

// Load ROIs
roiManager("Open", roifile);



// Get file list in the input dir and sort them.  
rawfiles = getFileList(inputdirectory);
rawfiles = Array.sort(rawfiles);
Array.print(rawfiles);

run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack redirect=None decimal=3");


// Step1: Create Mask
// Input: rootdir/raw
// Output:rootdir/mask1
// Note: Color threshold values are hardcoded. You may need to replace them for your sample.  

print("Step 1...");

for(ifile=0; ifile<rawfiles.length; ifile++) {
	if(matches(rawfiles[ifile],".*.[Jj][Pp][Ee]{0,1}[Gg]|[Tt][Ii][Ff]{1,2}")  ) {    // JPEG or TIFF
		//Open file
		filepath=inputdirectory + "/" + rawfiles[ifile];
		print(rawfiles[ifile]);
	
		open(filepath);

		//run("Set Scale...", "distance=400 known=1 pixel=1 unit=inches global");
		rename("original");

		//For original +  ROI image, use later
		selectWindow("original");
		run("Duplicate...", "title=original_ROI");

		selectWindow("original");

		
		// Color Thresholder 2.1.0/1.53c
		// Autogenerated macro, single images only!
		min=newArray(3);
		max=newArray(3);
		filter=newArray(3);
		a=getTitle();
		run("HSB Stack");
		run("Convert Stack to Images");
		selectWindow("Hue");
		rename("0");
		selectWindow("Saturation");
		rename("1");
		selectWindow("Brightness");
		rename("2");
		min[0]=30;
		max[0]=78;
		filter[0]="pass";
		min[1]=30;
		max[1]=255;
		filter[1]="pass";
		min[2]=50;
		max[2]=170;
		filter[2]="pass";
		for (i=0;i<3;i++){
		  selectWindow(""+i);
		  setThreshold(min[i], max[i]);
		  run("Convert to Mask");
		  if (filter[i]=="stop")  run("Invert");
		}
		imageCalculator("AND create", "0","1");
		imageCalculator("AND create", "Result of 0","2");
		for (i=0;i<3;i++){
		  selectWindow(""+i);
		  close();
		}
		selectWindow("Result of 0");
		close();
		selectWindow("Result of Result of 0");
		rename(a);
		// Colour Thresholding-------------

		
		
		// Extract leaves as mask
		run("Analyze Particles...", "size=10000-Infinity show=Masks clear");
		rename("mask");		

		
		// Save mask as PNG (binary)
		saveAs("png", mask1directory + "/" + "mask1_" + File.getNameWithoutExtension(rawfiles[ifile]) + ".png");


		//Close images
		run("Close All");
		//run("Clear Results");

	}
}




// Step2: 

print("Step2...")

mask1files = getFileList(mask1directory);
mask1files = Array.sort(mask1files);
Array.print(mask1files);

firstframe=true;

for(ifile=0; ifile<(mask1files.length-1); ifile++) {
	if(matches(mask1files[ifile],".*[0-9]*.png")) {  //png only

		if(firstframe){
			filepath1=mask1directory + "/" + mask1files[ifile];
			open(filepath1);
			rename("t1");	
			firstframe=false;
		}
		
		//Open file		
		filepath2=mask1directory + "/" + mask1files[ifile+1];
		print(mask1files[ifile+1]);
		open(filepath2);
		rename("t2");

		// White 0  Black 255
		imageCalculator("Min create", "t1","t2");		
		saveAs("png", mask2directory + "/" + replace(File.getNameWithoutExtension(mask1files[ifile]),"mask1_" ,"mask2_" ) +".png");


		// Measure
		roiManager("Show All");
		roiManager("Measure");

		//Save results
		saveAs("Results", resultdirectory + "/" + replace(File.getNameWithoutExtension(mask1files[ifile]),"mask1_" ,"" )+".xls");
		run("Clear Results");

		//Close original
		selectWindow("t1");
		close();
		selectWindow("t2");
		close();

		//Now only the result of ImageCalculator exists. Use it for the mask for the next round.
		rename("t1");
	}
}

close();
roiManager("Delete");

setBatchMode(false);


print("Completed!");
print("Results in "+resultdirectory);


